{"version":"1.127.1","results":[{"check_id":"python.django.security.injection.raw-html-format.raw-html-format","path":"beginnings/src/beginnings/extensions/csrf/extension.py","start":{"line":237,"col":28,"offset":9768},"end":{"line":237,"col":99,"offset":9839},"extra":{"message":"Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use templates (`django.shortcuts.render`) which will safely render HTML instead.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["django"],"references":["https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render","https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.django.security.injection.raw-html-format.raw-html-format","shortlink":"https://sg.run/oYj1"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.lang.security.audit.non-literal-import.non-literal-import","path":"beginnings/src/beginnings/extensions/loader.py","start":{"line":84,"col":22,"offset":2726},"end":{"line":84,"col":58,"offset":2762},"extra":{"message":"Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.","metadata":{"owasp":["A01:2021 - Broken Access Control"],"cwe":["CWE-706: Use of Incorrectly-Resolved Name or Reference"],"category":"security","technology":["python"],"references":["https://owasp.org/Top10/A01_2021-Broken_Access_Control"],"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Improper Authorization"],"source":"https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import","shortlink":"https://sg.run/y6Jk"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"beginnings/src/beginnings/extensions/rate_limiting/extension.py","start":{"line":238,"col":17,"offset":10483},"end":{"line":238,"col":44,"offset":10510},"extra":{"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","path":"beginnings/src/beginnings/extensions/rate_limiting/extension.py","start":{"line":303,"col":9,"offset":13652},"end":{"line":303,"col":39,"offset":13682},"extra":{"message":"Detected Flask route directly returning a formatted string. This is subject to cross-site scripting if user input can reach the string. Consider using the template engine instead and rendering pages with 'render_template()'.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"category":"security","technology":["flask"],"references":["https://owasp.org/Top10/A03_2021-Injection"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"HIGH","impact":"MEDIUM","confidence":"MEDIUM","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.audit.directly-returned-format-string.directly-returned-format-string","shortlink":"https://sg.run/Zv6o"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"beginnings/src/beginnings/routing/templates.py","start":{"line":81,"col":20,"offset":2701},"end":{"line":81,"col":68,"offset":2749},"extra":{"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","path":"beginnings/src/beginnings/routing/templates.py","start":{"line":154,"col":20,"offset":5008},"end":{"line":154,"col":46,"offset":5034},"extra":{"message":"Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.","metadata":{"cwe":["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"],"owasp":["A07:2017 - Cross-Site Scripting (XSS)","A03:2021 - Injection"],"references":["https://jinja.palletsprojects.com/en/2.11.x/api/#basics"],"category":"security","technology":["flask"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"MEDIUM","confidence":"LOW","license":"Semgrep Rules License v1.0. For more details, visit semgrep.dev/legal/rules-license","vulnerability_class":["Cross-Site-Scripting (XSS)"],"source":"https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2","shortlink":"https://sg.run/RoKe"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[],"paths":{"scanned":["beginnings/src/beginnings/__init__.py","beginnings/src/beginnings/config/__init__.py","beginnings/src/beginnings/config/enhanced_loader.py","beginnings/src/beginnings/config/environment.py","beginnings/src/beginnings/config/loader.py","beginnings/src/beginnings/config/route_resolver.py","beginnings/src/beginnings/config/validator.py","beginnings/src/beginnings/core/__init__.py","beginnings/src/beginnings/core/app.py","beginnings/src/beginnings/core/errors.py","beginnings/src/beginnings/extensions/__init__.py","beginnings/src/beginnings/extensions/auth/__init__.py","beginnings/src/beginnings/extensions/auth/extension.py","beginnings/src/beginnings/extensions/auth/providers/__init__.py","beginnings/src/beginnings/extensions/auth/providers/base.py","beginnings/src/beginnings/extensions/auth/providers/jwt_provider.py","beginnings/src/beginnings/extensions/auth/providers/oauth_provider.py","beginnings/src/beginnings/extensions/auth/providers/session_provider.py","beginnings/src/beginnings/extensions/auth/rbac.py","beginnings/src/beginnings/extensions/auth/token_blacklist.py","beginnings/src/beginnings/extensions/base.py","beginnings/src/beginnings/extensions/csrf/__init__.py","beginnings/src/beginnings/extensions/csrf/ajax.py","beginnings/src/beginnings/extensions/csrf/extension.py","beginnings/src/beginnings/extensions/csrf/template_hooks.py","beginnings/src/beginnings/extensions/csrf/templates.py","beginnings/src/beginnings/extensions/csrf/tokens.py","beginnings/src/beginnings/extensions/loader.py","beginnings/src/beginnings/extensions/rate_limiting/__init__.py","beginnings/src/beginnings/extensions/rate_limiting/algorithms.py","beginnings/src/beginnings/extensions/rate_limiting/extension.py","beginnings/src/beginnings/extensions/rate_limiting/storage.py","beginnings/src/beginnings/extensions/rate_limiting/trusted_proxies.py","beginnings/src/beginnings/extensions/security_headers/__init__.py","beginnings/src/beginnings/extensions/security_headers/cors.py","beginnings/src/beginnings/extensions/security_headers/csp.py","beginnings/src/beginnings/extensions/security_headers/extension.py","beginnings/src/beginnings/monitoring/__init__.py","beginnings/src/beginnings/monitoring/health.py","beginnings/src/beginnings/monitoring/logger.py","beginnings/src/beginnings/monitoring/metrics.py","beginnings/src/beginnings/py.typed","beginnings/src/beginnings/routing/__init__.py","beginnings/src/beginnings/routing/api.py","beginnings/src/beginnings/routing/cors.py","beginnings/src/beginnings/routing/html.py","beginnings/src/beginnings/routing/middleware.py","beginnings/src/beginnings/routing/static.py","beginnings/src/beginnings/routing/templates.py"]},"time":{"rules":[],"rules_parse_time":1.0033440589904785,"profiling_times":{"config_time":4.211217164993286,"core_time":2.0883560180664062,"ignores_time":0.0008769035339355469,"total_time":6.300804138183594},"parsing_time":{"total_time":0.20293521881103516,"per_file_time":{"mean":0.004227817058563231,"std_dev":2.47929225890194e-05},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":1075861760},"skipped_rules":[]}