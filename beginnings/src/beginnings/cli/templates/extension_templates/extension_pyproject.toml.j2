[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ extension_name }}-extension"
version = "0.1.0"
description = "{{ extension_name | title }} extension for Beginnings framework"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
readme = "README.md"
requires-python = ">=3.8"
keywords = ["beginnings", "extension", "{{ extension_type }}", "{{ extension_name }}"]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware",
]

dependencies = [
    "beginnings",
    "fastapi>=0.68.0",
    "starlette>=0.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-asyncio",
    "pytest-cov",
    "black",
    "isort",
    "mypy",
    "flake8",
]

[project.urls]
Homepage = "https://github.com/your-username/{{ extension_name }}-extension"
Repository = "https://github.com/your-username/{{ extension_name }}-extension.git"
Documentation = "https://{{ extension_name }}-extension.readthedocs.io/"
Changelog = "https://github.com/your-username/{{ extension_name }}-extension/blob/main/CHANGELOG.md"

[tool.setuptools.packages.find]
where = ["."]
include = ["{{ extension_name }}*"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["{{ extension_name }}"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true