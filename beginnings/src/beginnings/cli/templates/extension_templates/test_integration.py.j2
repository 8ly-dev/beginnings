"""Tests for {{ extension_name }} integration extension."""

import pytest
import json
import hmac
import hashlib
from typing import Dict, Any
from unittest.mock import AsyncMock, MagicMock, patch
from fastapi.testclient import TestClient

from {{ extension_name }}.extension import {{ extension_name | title }}Extension
from {{ extension_name }}.client import {{ extension_name | title }}Client, {{ extension_name | title }}Error
from {{ extension_name }}.webhooks import {{ extension_name | title }}WebhookHandler


class Test{{ extension_name | title }}Extension:
    """Test {{ extension_name }} integration extension."""
    
    def test_init_with_default_config(self):
        """Test extension initialization with default configuration."""
        config = {
            "enabled": True,
            "api_key": "test_key",
            "api_secret": "test_secret"
        }
        extension = {{ extension_name | title }}Extension(config)
        
        assert extension.enabled is True
        assert extension.api_key == "test_key"
        assert extension.api_secret == "test_secret"
        assert extension.base_url == "https://api.example.com"
        assert extension.enable_webhooks is True
    
    def test_init_with_custom_config(self):
        """Test extension initialization with custom configuration."""
        config = {
            "enabled": True,
            "api_key": "custom_key",
            "api_secret": "custom_secret",
            "base_url": "https://custom.example.com",
            "timeout": 60,
            "webhook_path": "/custom/webhooks",
            "enable_webhooks": False
        }
        extension = {{ extension_name | title }}Extension(config)
        
        assert extension.base_url == "https://custom.example.com"
        assert extension.timeout == 60
        assert extension.webhook_path == "/custom/webhooks"
        assert extension.enable_webhooks is False
    
    def test_validate_config_valid(self, integration_config):
        """Test configuration validation with valid config."""
        extension = {{ extension_name | title }}Extension(integration_config)
        errors = extension.validate_config()
        assert errors == []
    
    def test_validate_config_missing_api_key(self):
        """Test configuration validation with missing API key."""
        config = {"enabled": True, "api_secret": "secret"}
        extension = {{ extension_name | title }}Extension(config)
        
        errors = extension.validate_config()
        assert "api_key is required" in errors
    
    def test_validate_config_missing_api_secret(self):
        """Test configuration validation with missing API secret."""
        config = {"enabled": True, "api_key": "key"}
        extension = {{ extension_name | title }}Extension(config)
        
        errors = extension.validate_config()
        assert "api_secret is required" in errors
    
    def test_validate_config_invalid_timeout(self):
        """Test configuration validation with invalid timeout."""
        config = {
            "enabled": True,
            "api_key": "key",
            "api_secret": "secret",
            "timeout": -1
        }
        extension = {{ extension_name | title }}Extension(config)
        
        errors = extension.validate_config()
        assert "timeout must be a positive number" in errors
    
    def test_should_apply_to_webhook_path(self, integration_config):
        """Test route application for webhook endpoints."""
        extension = {{ extension_name | title }}Extension(integration_config)
        result = extension.should_apply_to_route("/webhooks/{{ extension_name }}", ["POST"], {})
        assert result is True
    
    def test_should_apply_to_non_webhook_path(self, integration_config):
        """Test route application for non-webhook routes."""
        extension = {{ extension_name | title }}Extension(integration_config)
        result = extension.should_apply_to_route("/other/endpoint", ["GET"], {})
        assert result is False
    
    def test_should_apply_to_route_enabled_in_config(self, integration_config):
        """Test route application with route-specific enable."""
        extension = {{ extension_name | title }}Extension(integration_config)
        route_config = {"{{ extension_name }}": {"enabled": True}}
        result = extension.should_apply_to_route("/other/endpoint", ["GET"], route_config)
        assert result is True
    
    @pytest.mark.asyncio
    async def test_startup_handler(self, integration_config):
        """Test startup handler."""
        extension = {{ extension_name | title }}Extension(integration_config)
        startup_handler = extension.get_startup_handler()
        
        assert startup_handler is not None
        # Should not raise any exceptions
        await startup_handler()
    
    @pytest.mark.asyncio
    async def test_shutdown_handler(self, integration_config):
        """Test shutdown handler."""
        extension = {{ extension_name | title }}Extension(integration_config)
        shutdown_handler = extension.get_shutdown_handler()
        
        assert shutdown_handler is not None
        # Should not raise any exceptions
        await shutdown_handler()


class Test{{ extension_name | title }}Client:
    """Test {{ extension_name }} client."""
    
    @pytest.fixture
    def client_config(self):
        """Client configuration for testing."""
        return {
            "api_key": "test_api_key",
            "api_secret": "test_api_secret",
            "base_url": "https://test.example.com",
            "timeout": 30.0
        }
    
    def test_client_initialization(self, client_config):
        """Test client initialization."""
        client = {{ extension_name | title }}Client(**client_config)
        
        assert client.api_key == "test_api_key"
        assert client.api_secret == "test_api_secret"
        assert client.base_url == "https://test.example.com"
        assert client.timeout == 30.0
    
    @pytest.mark.asyncio
    async def test_client_context_manager(self, client_config):
        """Test client as async context manager."""
        async with {{ extension_name | title }}Client(**client_config) as client:
            assert client is not None
            assert client._client is not None
    
    @pytest.mark.asyncio
    async def test_authentication_success(self, client_config):
        """Test successful authentication."""
        client = {{ extension_name | title }}Client(**client_config)
        
        # Mock successful authentication response
        mock_response = MagicMock()
        mock_response.json.return_value = {
            "access_token": "test_token",
            "expires_in": 3600
        }
        mock_response.raise_for_status = MagicMock()
        
        with patch.object(client._client, 'post', return_value=mock_response):
            token = await client.authenticate()
            assert token == "test_token"
            assert client._auth_token == "test_token"
    
    @pytest.mark.asyncio
    async def test_authentication_cached(self, client_config):
        """Test authentication token caching."""
        client = {{ extension_name | title }}Client(**client_config)
        
        # Set a cached token
        from datetime import datetime, timedelta
        client._auth_token = "cached_token"
        client._auth_expires_at = datetime.utcnow() + timedelta(hours=1)
        
        # Should return cached token without making HTTP request
        token = await client.authenticate()
        assert token == "cached_token"
    
    @pytest.mark.asyncio
    async def test_make_request_success(self, client_config):
        """Test successful API request."""
        client = {{ extension_name | title }}Client(**client_config)
        
        # Mock authentication
        client._auth_token = "test_token"
        client._auth_expires_at = datetime.utcnow() + timedelta(hours=1)
        
        # Mock successful API response
        mock_response = MagicMock()
        mock_response.json.return_value = {"data": "test_data"}
        mock_response.raise_for_status = MagicMock()
        
        with patch.object(client._client, 'request', return_value=mock_response):
            result = await client._make_request("GET", "/test")
            assert result == {"data": "test_data"}
    
    @pytest.mark.asyncio
    async def test_make_request_authentication_error(self, client_config):
        """Test API request with authentication error."""
        client = {{ extension_name | title }}Client(**client_config)
        
        # Mock 401 response
        from httpx import HTTPStatusError, Response, Request
        mock_response = Response(401)
        mock_request = Request("GET", "https://test.example.com/test")
        
        with patch.object(client._client, 'request', side_effect=HTTPStatusError("Unauthorized", request=mock_request, response=mock_response)):
            with pytest.raises({{ extension_name | title }}Error, match="API request failed: 401"):
                await client._make_request("GET", "/test")
    
    @pytest.mark.asyncio
    async def test_get_resource(self, client_config):
        """Test getting a resource."""
        client = {{ extension_name | title }}Client(**client_config)
        
        with patch.object(client, '_make_request', return_value={"id": "123", "name": "test"}):
            result = await client.get_resource("123")
            assert result["id"] == "123"
            assert result["name"] == "test"
    
    @pytest.mark.asyncio
    async def test_list_resources(self, client_config):
        """Test listing resources."""
        client = {{ extension_name | title }}Client(**client_config)
        
        expected_result = {
            "resources": [{"id": "1"}, {"id": "2"}],
            "total": 2,
            "limit": 50,
            "offset": 0
        }
        
        with patch.object(client, '_make_request', return_value=expected_result):
            result = await client.list_resources(limit=50, offset=0)
            assert result["total"] == 2
            assert len(result["resources"]) == 2
    
    @pytest.mark.asyncio
    async def test_create_resource(self, client_config):
        """Test creating a resource."""
        client = {{ extension_name | title }}Client(**client_config)
        
        resource_data = {"name": "New Resource", "type": "test"}
        expected_result = {"id": "new_123", **resource_data}
        
        with patch.object(client, '_make_request', return_value=expected_result):
            result = await client.create_resource(resource_data)
            assert result["id"] == "new_123"
            assert result["name"] == "New Resource"


class Test{{ extension_name | title }}WebhookHandler:
    """Test {{ extension_name }} webhook handler."""
    
    @pytest.fixture
    def webhook_secret(self):
        """Webhook secret for testing."""
        return "test_webhook_secret"
    
    @pytest.fixture
    def webhook_handler(self, webhook_secret):
        """Create webhook handler for testing."""
        return {{ extension_name | title }}WebhookHandler(webhook_secret)
    
    def test_handler_initialization(self, webhook_secret):
        """Test webhook handler initialization."""
        handler = {{ extension_name | title }}WebhookHandler(webhook_secret)
        
        assert handler.webhook_secret == webhook_secret
        assert handler.verify_signatures is True
        assert "ping" in handler.event_handlers
        assert "test" in handler.event_handlers
    
    def test_register_custom_handler(self, webhook_handler):
        """Test registering custom event handler."""
        def custom_handler(event_data, webhook_data):
            return {"custom": True}
        
        webhook_handler.register_handler("custom_event", custom_handler)
        assert "custom_event" in webhook_handler.event_handlers
    
    def test_verify_signature_valid(self, webhook_handler):
        """Test valid signature verification."""
        body = b'{"type": "test", "data": {}}'
        
        # Calculate valid signature
        signature = hmac.new(
            webhook_handler.webhook_secret.encode(),
            body,
            hashlib.sha256
        ).hexdigest()
        
        result = webhook_handler._verify_signature(body, signature)
        assert result is True
    
    def test_verify_signature_invalid(self, webhook_handler):
        """Test invalid signature verification."""
        body = b'{"type": "test", "data": {}}'
        invalid_signature = "invalid_signature"
        
        result = webhook_handler._verify_signature(body, invalid_signature)
        assert result is False
    
    def test_verify_signature_with_prefix(self, webhook_handler):
        """Test signature verification with sha256= prefix."""
        body = b'{"type": "test", "data": {}}'
        
        # Calculate signature with prefix
        signature = hmac.new(
            webhook_handler.webhook_secret.encode(),
            body,
            hashlib.sha256
        ).hexdigest()
        signature_with_prefix = f"sha256={signature}"
        
        result = webhook_handler._verify_signature(body, signature_with_prefix)
        assert result is True
    
    @pytest.mark.asyncio
    async def test_handle_ping_event(self, webhook_handler):
        """Test handling ping events."""
        event_data = {}
        webhook_data = {"type": "ping", "data": event_data}
        
        result = await webhook_handler._handle_ping(event_data, webhook_data)
        
        assert result["pong"] is True
        assert "timestamp" in result
        assert "message" in result
    
    @pytest.mark.asyncio
    async def test_handle_test_event(self, webhook_handler):
        """Test handling test events."""
        event_data = {"test_field": "test_value"}
        webhook_data = {"type": "test", "data": event_data}
        
        result = await webhook_handler._handle_test(event_data, webhook_data)
        
        assert result["test_received"] is True
        assert result["event_data"] == event_data
        assert "processed_at" in result
    
    @pytest.mark.asyncio
    async def test_handle_error_event(self, webhook_handler):
        """Test handling error events."""
        event_data = {"message": "Something went wrong", "code": "ERR001"}
        webhook_data = {"type": "error", "data": event_data}
        
        result = await webhook_handler._handle_error(event_data, webhook_data)
        
        assert result["error_acknowledged"] is True
        assert result["error_code"] == "ERR001"
        assert result["error_message"] == "Something went wrong"
    
    @pytest.mark.asyncio
    async def test_process_webhook_unknown_event(self, webhook_handler):
        """Test processing unknown event type."""
        result = await webhook_handler._process_webhook(
            "unknown_event",
            {},
            {"type": "unknown_event", "data": {}}
        )
        
        assert "No handler for event type" in result["message"]
    
    @pytest.mark.asyncio
    async def test_handle_webhook_success(self, webhook_handler):
        """Test successful webhook handling."""
        from fastapi import Request
        
        # Create mock request
        webhook_data = {"type": "ping", "data": {}, "id": "webhook_123"}
        body = json.dumps(webhook_data).encode()
        
        # Calculate signature
        signature = hmac.new(
            webhook_handler.webhook_secret.encode(),
            body,
            hashlib.sha256
        ).hexdigest()
        
        mock_request = MagicMock(spec=Request)
        mock_request.body = AsyncMock(return_value=body)
        mock_request.headers = {"X-{{ extension_name | title }}-Signature": signature}
        
        response = await webhook_handler.handle_webhook(mock_request)
        
        assert response.status_code == 200
        response_data = json.loads(response.body)
        assert response_data["status"] == "success"
        assert response_data["event_id"] == "webhook_123"
    
    @pytest.mark.asyncio
    async def test_handle_webhook_invalid_signature(self, webhook_handler):
        """Test webhook handling with invalid signature."""
        from fastapi import Request, HTTPException
        
        webhook_data = {"type": "ping", "data": {}}
        body = json.dumps(webhook_data).encode()
        
        mock_request = MagicMock(spec=Request)
        mock_request.body = AsyncMock(return_value=body)
        mock_request.headers = {"X-{{ extension_name | title }}-Signature": "invalid"}
        
        with pytest.raises(HTTPException) as exc_info:
            await webhook_handler.handle_webhook(mock_request)
        
        assert exc_info.value.status_code == 401
        assert "Invalid signature" in str(exc_info.value.detail)
    
    @pytest.mark.asyncio
    async def test_handle_webhook_invalid_json(self, webhook_handler):
        """Test webhook handling with invalid JSON."""
        from fastapi import Request, HTTPException
        
        invalid_body = b"invalid json"
        
        mock_request = MagicMock(spec=Request)
        mock_request.body = AsyncMock(return_value=invalid_body)
        mock_request.headers = {}
        
        # Disable signature verification for this test
        webhook_handler.verify_signatures = False
        
        with pytest.raises(HTTPException) as exc_info:
            await webhook_handler.handle_webhook(mock_request)
        
        assert exc_info.value.status_code == 400
        assert "Invalid JSON" in str(exc_info.value.detail)


class Test{{ extension_name | title }}Integration:
    """Integration tests for {{ extension_name }} extension."""
    
    @pytest.fixture
    def app_with_extension(self, app, integration_config):
        """Create app with {{ extension_name }} extension configured."""
        extension = {{ extension_name | title }}Extension(integration_config)
        
        # Add middleware
        factory = extension.get_middleware_factory()
        middleware = factory({})
        app.add_middleware(type(middleware),
                          extension_config=integration_config,
                          route_config={})
        
        return app
    
    def test_webhook_endpoint_integration(self, app_with_extension, integration_config):
        """Test webhook endpoint integration."""
        from fastapi.testclient import TestClient
        import json
        import hmac
        import hashlib
        
        client = TestClient(app_with_extension)
        
        # Create webhook handler and add route
        webhook_secret = integration_config.get("webhook_secret", "test_secret")
        handler = {{ extension_name | title }}WebhookHandler(webhook_secret)
        
        @app_with_extension.post("/webhooks/{{ extension_name }}")
        async def webhook_endpoint(request):
            return await handler.handle_webhook(request)
        
        # Prepare webhook data
        webhook_data = {"type": "ping", "data": {}, "id": "test_123"}
        body = json.dumps(webhook_data)
        
        # Calculate signature
        signature = hmac.new(
            webhook_secret.encode(),
            body.encode(),
            hashlib.sha256
        ).hexdigest()
        
        # Make webhook request
        response = client.post(
            "/webhooks/{{ extension_name }}",
            data=body,
            headers={
                "Content-Type": "application/json",
                "X-{{ extension_name | title }}-Signature": signature
            }
        )
        
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "success"
        assert data["event_id"] == "test_123"